/* tslint:disable */
/* eslint-disable */
/**
 * Swinging Example API
 * Kuy Hee Kuy Hee
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DtosLoginRequest
 */
export interface DtosLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof DtosLoginRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosLoginRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface DtosLoginResponse
 */
export interface DtosLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof DtosLoginResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosLoginResponse
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosLoginResponse
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface DtosRegisterRequest
 */
export interface DtosRegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof DtosRegisterRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosRegisterRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosRegisterRequest
     */
    'username'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Login
         * @summary Login
         * @param {DtosLoginRequest} request LoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (request: DtosLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('authLoginPost', 'request', request)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register
         * @summary Register
         * @param {DtosRegisterRequest} request RegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost: async (request: DtosRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('authRegisterPost', 'request', request)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Login
         * @summary Login
         * @param {DtosLoginRequest} request LoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(request: DtosLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtosLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Register
         * @summary Register
         * @param {DtosRegisterRequest} request RegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterPost(request: DtosRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtosLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegisterPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Login
         * @summary Login
         * @param {DtosLoginRequest} request LoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(request: DtosLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<DtosLoginResponse> {
            return localVarFp.authLoginPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * Register
         * @summary Register
         * @param {DtosRegisterRequest} request RegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost(request: DtosRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<DtosLoginResponse> {
            return localVarFp.authRegisterPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Login
     * @summary Login
     * @param {DtosLoginRequest} request LoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authLoginPost(request: DtosLoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authLoginPost(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register
     * @summary Register
     * @param {DtosRegisterRequest} request RegisterRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authRegisterPost(request: DtosRegisterRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authRegisterPost(request, options).then((request) => request(this.axios, this.basePath));
    }
}



